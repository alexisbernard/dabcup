# Example of a profiles file for dabcup (http://dabcup.obloh.com)

### General informations ###
# Dabcup will automatically load the file ~/.dabcup/profiles.yml. So copy
# profiles.yml in ~/.dabcup.
# 
# All fields are CASE SENSITIVE !!!

### Security informations ###
# This file doesn't contain any password for database authentification. Indeed
# shell commands are stored into log file which are not protected. That's why
# dabcup don't provide the password when invoking mysqldump for example.
# Otherwise it may contains your amazon secret key, FTP password, ... In this
# case be sure that this file is readable only by you. Execute this command:
# chmod 600 ~/.dabcup/profiles.yml
# FTP, SCP passwords or amazon secret key will never appear in log files.
# If you really dont want any password in this file you should use SFTP storage
# and authentification with keys. Leave the field password empty and net-ssh
# will try to use a certificate.

### PostgreSQL authentification ###
# If your not the database admin, the only solution is to store your password in
# ~/.pgpass file which will be read by the PostgreSQL client. It should look like this:
# localhost:*:*:my_login:my_password
# Don't forget to execute chmod 600 ~/.pgpass.
# More informations are available there:
# http://www.postgresql.org/docs/8.1/static/libpq-pgpass.html

### MySQL authentification ###
# You can store you password in ~/.my.cnf. The file should look like this:
# [client]
# password=my_password
# Don't forget to do chmod 600 ~/.my.cnf to protect your password.

# This is
profile_name:                       # Unique for each profile, mysite.com for example
  database:
    adapter: PostgreSQL             # PostgreSQL, MySQL are supported
    host: localhost                 # Database address
    port:                           # Leave empty for default prot
    login: user_name                # Database user name.
    name: database_name             # Database name.
  storage:
    adapter: FTP                    # S3, SFTP, FTP and LOCAL are supported
    host: backup.server.com         # Address
    port: 21                        # Left empty to use th default port
    login: backup                   # User name
    password: password123           # User password
    path: /my/site/                 # Drectory to put dumps
    rules:                          # A full rules example. Rules are executed in the specified order
      - remove_older_than: 1Y       # Remove dumps older than 1 year
      - keep_days_of_month: 1       # Keep dumps of the first day of the month
      - remove_older_than: 3M       # Remove dumps older than 3 motnhs
      - keep_days_of_week: [1, 2]   # Keep dumps of the first and second day of the week
      - remove_older_than: 15D      # Remove dumps older than 15 days
  spare_storage:                    # If you'r really careful, you want a 2nd backups storage
    adapter: S3                     # Amazon Simple Storage Service
    host:                           # S3 don't required host address
    port:                           # S3 don't required port. Leave empty for default port
    login: amazon_key               # Your amazon key
    password: amazon_secret_key     # Your amazon secret key
    bucket: bucket_name             # Only for S3

# For a quick test just copy and set the fields, then run:
# dabcup my-backup store
# dabcup my-backup list
my-backup:
  database:
    adapter: PostgreSQL
    host: localhost
    login: your-name
    name: dbname
  storage:
    adapter: LOCAL
    path: ~/dumps